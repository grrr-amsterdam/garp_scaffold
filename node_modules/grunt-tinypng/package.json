{
  "name": "grunt-tinypng",
  "description": "image optimization via tinypng service",
  "version": "0.5.3",
  "homepage": "https://github.com/marrone/grunt-tinypng",
  "author": {
    "name": "Mike M",
    "email": "mmarrone@pch.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/marrone/grunt-tinypng.git"
  },
  "bugs": {
    "url": "https://github.com/marrone/grunt-tinypng/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/marrone/grunt-tinypng/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1",
    "humanize": "~0.0.9",
    "multimeter": "~0.1.1",
    "promise": "~4.0.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.5",
    "grunt-contrib-nodeunit": "~0.2.2",
    "humanize": "~0.0.9",
    "multimeter": "~0.1.1",
    "promise": "~4.0.0"
  },
  "license": "MIT",
  "readme": "# grunt-tinypng\n\n> image optimization via tinypng service\n\n## Getting Started\nThis plugin requires Grunt `~0.4.2`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-tinypng --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-tinypng');\n```\n\n## The \"tinypng\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `tinypng` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  tinypng: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n});\n```\n\n### Options\n\n#### options.apiKey\nType: `String`\nDefault value: `''`\n\nYour required api key. Get one at https://tinypng.com/developers\n\n#### options.checkSigs\nType: `Boolean`\nDefault value: `false`\n\nWhether or not to compare existing source file md5 signatures against those found in the `options.sigFile` json data.\nWhen the signatures match, the file is skipped from being minified again, allowing you to better stay within your API request limits.\nYou can pass `--force` as a command line option to force the image to be minified whether or not the signatures match.\nWhen an image is minified, and `options.checkSigs` is true, the md5 signature is determined from the unminified source image and written to the file at `options.sigFile` (a suggested location would be somewhere under your source control).\n\nSignatures are based off the unminified source image, so that when the source changes it will be re-minified and re-written to the destination file.\n\n#### options.sigFile\nType: `String`\nDefault value: `''`\n\nThe file location to write the source image md5 signatures to when using the `options.checkSigs` option\n\n#### options.summarize\nType: `Boolean`\nDefault value: `false`\n\nIf True, will print a stats summary of number of images skipped, number compressed and the bytes saved, e.g.)\n`Skipped: 1 image, Compressed: 1 image, Savings: 153.86 KB (ratio: 0.1999)`\n\n#### options.showProgress\nType: `Boolean`\nDefault value: `false`\n\nIf True, will print upload/download progress bars while images are being processed through the tinypng API. \nProgress bars use the [multimeter](https://github.com/substack/node-multimeter) module\n\n#### options.stopOnImageError\nType: `Boolean`\nDefault value: `true`\n\nIf True, will failures to process an image will result in a grunt error and abort further task execution (unless --force is specified).\nIf False, failures to process images will simply be logged as warnings.\n\n####\n### Usage Examples\n\n```js\ngrunt.initConfig({\n  tinypng: {\n    options: {\n        apiKey: \"YOUR API KEY HERE\",\n        checkSigs: true,\n        sigFile: 'dest/file_sigs.json',\n        summarize: true,\n        showProgress: true,\n        stopOnImageError: true\n    },\n    compress: {\n        files: {\n          'dest/foo.min.png': 'src/foo.png'\n        }\n    },\n    compress2: {\n        expand: true, \n        src: 'src/{foo,bar,baz}.png', \n        dest: 'dest/',\n        ext: '.min.png'\n    },\n    compress3: {\n        src: ['{foo,bar,baz}.png', '!*.min.png'],\n        cwd: 'src/',\n        dest: 'dest/',\n        expand: true,\n        rename: function(dest, src) { \n            var parts = src.split('/'),\n            fname = path.basename(parts.pop(), \".png\");\n            return path.join(dest, fname + '.min.png');\n        }\n    }\n  }\n});\n```\n### Debugging\nPass the `--verbose` command line option to see the API requests that are being made and those images that are skipped due to matching file signatures (`options.checkSigs`)\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-tinypng@0.5.3",
  "_from": "grunt-tinypng@~0.5.2"
}
