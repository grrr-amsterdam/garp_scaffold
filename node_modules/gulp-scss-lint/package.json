{
  "name": "gulp-scss-lint",
  "description": "Validate `.scss` files with `scss-lint`",
  "version": "0.1.4",
  "homepage": "http://github.com/juanfran/gulp-scss-lint",
  "repository": {
    "type": "git",
    "url": "git://github.com/juanfran/gulp-scss-lint.git"
  },
  "main": "./src/index.js",
  "author": {
    "name": "Juanfran AlcÃ¡ntara"
  },
  "keywords": [
    "gulpplugin",
    "scss-lint",
    "scsslint",
    "sass-lint",
    "scss",
    "lint",
    "gulp"
  ],
  "engines": {
    "node": ">= 0.10"
  },
  "license": "MIT",
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "chai": "~1.9.1",
    "mocha": "~1.18.2",
    "proxyquire": "^1.0.1",
    "sinon": "^1.10.2"
  },
  "dependencies": {
    "dargs": "~0.1.0",
    "event-stream": "~3.1.2",
    "gulp-util": "~2.2.14",
    "xml2js": "^0.4.4"
  },
  "readme": "#gulp-scss-lint\n[![Build Status](https://travis-ci.org/juanfran/gulp-scss-lint.svg?branch=master)](https://travis-ci.org/juanfran/gulp-scss-lint)\n> Lint your `.scss` files\n\n## Install\n\n```shell\nnpm install gulp-scss-lint --save-dev\n```\n\nThis plugin requires Ruby and [scss-lint](https://github.com/causes/scss-lint)\n```shell\ngem install scss-lint\n```\n\n## Usage\n\n`gulpfile.js`\n```js\nvar scsslint = require('gulp-scss-lint');\n\ngulp.task('scss-lint', function() {\n  gulp.src('/scss/*.scss')\n    .pipe(scsslint());\n});\n```\n\n## Api\n\n#### config\n\n- Type: `String`\n- Default: [default scss-lint config file](https://github.com/causes/scss-lint/blob/master/config/default.yml).\n\n```js\nscsslint({\n    'config': 'lint.yml',\n});\n```\n\n#### bundleExec\n\n- Type: `Boolean`\n- Default: `false`\n\nIf your gem is installed via [bundler](http://bundler.io), then set this option to `true`\n\n```js\nscsslint({\n    'bundleExec': true\n});\n```\n\n#### reporterOutput\n\n- Type: `String`\n- Default: `null`\n\nIf you want to save the report to a XML file then set reporterOutput with a file name\n\n```js\nscsslint({\n    'reporterOutput': 'scssReport.xml'\n});\n```\n\n#### xmlPipeOutput\n\n- Type: `String`\n- Default: `null`\n\nIf you want the pipe return the XML file instead of the `.scss` file then set xmlPipeOutput with a filename\n\n```js\ngulp.src(['**/*.scss'])\n  .pipe(scsslint({\n    'xmlPipeOutput': 'scssReport.xml'\n  }))\n  .pipe(gulp.dest('./reports'))\n```\n\n#### maxBuffer\n- Type: Number or Boolean\n- Default: 300 * 1024\n\nSet maxBuffer for the child_process.exec process. If you get a `maxBuffer exceeded` error, set it with a higher number. maxBuffer specifies the largest amount of data allowed on stdout or stderr.\n\n```js\ngulp.src(['**/*.scss'])\n  .pipe(scsslint({\n    'maxBuffer': 307200\n  }))\n  .pipe(gulp.dest('./reports'))\n```\n\n## Excluding\n\nTo exclude files you should use the gulp.src ignore format '!filePath''\n\n```js\ngulp.src(['/scss/*.scss', '!/scss/vendor/**/*.scss'])\n  .pipe(scsslint({'config': 'lint.yml'}));\n```\n\nOr you should use [gulp-filter](https://github.com/sindresorhus/gulp-filter)\n\n```js\nvar scsslint = require('gulp-scss-lint');\nvar gulpFilter = require('gulp-filter');\n\ngulp.task('scss-lint', function() {\n  var scssFilter = gulpFilter('/scss/vendor/**/*.scss');\n\n  gulp.src('/scss/*.scss')\n    .pipe(scssFilter)\n    .pipe(scsslint())\n    .pipe(scssFilter.restore());\n});\n\n```\n\n## Lint only modified files\nYou should use [gulp-cached](https://github.com/wearefractal/gulp-cached)\n\nIn this example, without the gulp-cached plugin, every time you save a `.scss` file the scss-lint plugin will check all your files. In case you have gulp-cached plugin, it will only check the modified files.\n\n```js\nvar scsslint = require('gulp-scss-lint');\nvar cache = require('gulp-cached');\n\ngulp.task('scss-lint', function() {\n  gulp.src('/scss/*.scss')\n    .pipe(cache('scsslint'))\n    .pipe(scsslint());\n});\n\ngulp.task('watch', function() {\n  gulp.watch('/scss/*.scss', ['scss-lint']);\n});\n```\n\n## Results\n\nAdds the following properties to the file object:\n\n```js\nfile.scsslint = {\n  'success': false,\n  'errors': 0,\n  'warnings': 1,\n  'issues': [\n    {\n      'line': 123,\n      'column': 10,\n      'severity': 'warning', // or `error`\n      'reason': 'a description of the error'\n    }\n  ]\n};\n```\n\nThe issues have the same parameters that [scss-lint](https://github.com/causes/scss-lint#xml)\n\n## Custom reporter\n\nYou can replace the default console log by a custom output with `customReport`. customReport function will be called for each file that includes the lint results [See result params](#results)\n\n```js\nvar scsslint = require('gulp-scss-lint');\n\nvar myCustomReporter = function(file) {\n  if (!file.scsslint.success) {\n    gutil.log(file.scsslint.issues.length + ' issues found in ' + file.path);\n  }\n};\n\ngulp.task('scss-lint', function() {\n  gulp.src('/scss/*.scss')\n    .pipe(scsslint({\n        customReport: myCustomReporter\n    }))\n});\n```\n\nYou can even throw an exception\n\n```js\nvar scsslint = require('gulp-scss-lint');\n\nvar myCustomReporter = function(file, stream) {\n  if (!file.scsslint.success) {\n    stream.emit('error', new gutil.PluginError(\"scss-lint\", \"some error\"));\n  }\n};\n\ngulp.task('scss-lint', function() {\n  gulp.src('/scss/*.scss')\n    .pipe(scsslint({\n        customReport: myCustomReporter\n    }))\n});\n```\n\n## Default reporter\n\nThis is an example from the default reporter output\n\n```shell\n[gulp] 3 issues found in ./test/fixtures/invalid.scss\n[gulp] ./test/fixtures/invalid.scss:2 [W] Line should be indented 2 spaces, but was indented 0 spaces\n[gulp] ./test/fixtures/invalid.scss:2 [W] Empty rule\n[gulp] ./test/fixtures/invalid.scss:3 [W] Files should end with a trailing newline\n```\n\n## Fail reporter\n\nIf you want the task to fail when \"scss-lint\" was not a success then call `failReporter` after the scsslint call.\n\nThis example will log the issues as usual and then fails if there is any issue.\n\n```js\nvar scsslint = require('gulp-scss-lint');\n\ngulp.task('scss-lint', function() {\n  gulp.src('/scss/*.scss')\n    .pipe(scsslint())\n    .pipe(scsslint.failReporter())\n});\n```\n\n## Testing\n\nTo test you must first have `scss-lint` installed globally using\n`gem install scss-lint` as well as via bundler using `bundle install`.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/juanfran/gulp-scss-lint/issues"
  },
  "_id": "gulp-scss-lint@0.1.4",
  "dist": {
    "shasum": "05c489253bf43109c735b460199776b7e3455e3d"
  },
  "_from": "gulp-scss-lint@^0.1.4",
  "_resolved": "https://registry.npmjs.org/gulp-scss-lint/-/gulp-scss-lint-0.1.4.tgz"
}
