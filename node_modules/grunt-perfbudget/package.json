{
  "name": "grunt-perfbudget",
  "description": "Grunt task for Performance Budgeting",
  "version": "0.1.5",
  "homepage": "https://github.com/tkadlec/grunt-perfbudget",
  "author": {
    "name": "Tim Kadlec",
    "email": "tim@timkadlec.com",
    "url": "http://timkadlec.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tkadlec/grunt-perfbudget.git"
  },
  "bugs": {
    "url": "https://github.com/tkadlec/grunt-perfbudget/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tkadlec/grunt-perfbudget/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "^0.9.2",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "dependencies": {
    "webpagetest": "~0.2.4"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-perfbudget\n\n> Grunt task for Performance Budgeting\n\n### Performance budgeting thanks to the magic of WebPageTest\n\ngrunt-perfbudget is a [Grunt.js](https://github.com/cowboy/grunt/) task for enforcing a performance budget ([more on performance budgets](http://timkadlec.com/2013/01/setting-a-performance-budget/)). It uses the wonderful [webpagetest.org](http://webpagetest.org) and the [WebPagetest API Wrapper for NodeJS](https://github.com/marcelduran/webpagetest-api) created by [Marcel Duran](https://github.com/marcelduran).\n\ngrunt-perfbudget uses either a public or private instance of WebPagetest to perform tests on a specified URL. It compares test results to budgets you specify. If the budget is met, the tasks successfully completes. If it the page exceeds your performance budgets, the task fails and informs you why.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-perfbudget --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-perfbudget');\n```\n\n## The \"perfbudget\" task\n\n### Required configuration properties\n\nWhile grunt-perfbudget provides defaults for most configurable options, it does require the URL to be tested, as well as an API key to use if testing against the public instance of WebPagetest. For more information on obtaining a key, [see this thread](http://www.webpagetest.org/forums/showthread.php?tid=466) on the WebPagetest forums.\n\nThese can be set in your Gruntfile.js config file like so:\n\n```javascript\nperfbudget: {\n  default: {\n    options: {\n      url: 'http://google.com',\n      key: 'API_KEY_HERE'\n    }\n  }\n}\n```\n\nWith these configuration properties set, you can add `perfbudget` to your default tasks list. That'll look something like this:\n\n    grunt.registerTask('default', ['jshint', 'perfbudget']);\n\nWith this in place, grunt-perfbudget will now test your site against the default performance budget settings to see if you're passing.\n\n\n### Options\n\ngrunt-perfbudget takes the following options:\n\n#### options.url\n\nType `String`\nDefault value: NONE \n\nThe url you want to perform the tests on.\n\n#### options.key\n\nType `String`\nDefault value: NONE \n\nThe API Key for the public instance of WPT. *Not needed if using a private instance of webpagetest*\n\n#### options.location\n\nType `String`\nDefault value: 'Dulles_Nexus5' \n\nThe default WPT location/device to conduct the test using.\n\n#### options.wptInstance\n\nType `String`\nDefault value: 'www.webpagetest.org' \n\nThe WPT instance to conduct the tests with.\n\n#### options.pollResults\n\nType `Number`\nDefault value: 5\n\nThe frequency (in seconds) to poll for results after the test has been scheduled.\n\n#### options.timeout\n\nType `Number`\nDefault value: 60\n\nTimeout (in seconds) for the tests to run.\n\n#### options.connectivity\n\nType `String`\nDefault value: NONE\n\nThe connectivity profile to use. WPT provides the following options: Cable, DSL, FIOS, Dial, 3G, Native, custom.\n\n#### options.bandwidthDown\n\nType `String`\nDefault value: NONE\n\nThe download bandwith in Kbps. *Used when connectivity is set to `custom`.*\n\n#### options.bandwidthUp\n\nType `String`\nDefault value: NONE\n\nThe upload bandwith in Kbps. *Used when connectivity is set to `custom`.*\n\n#### options.latency\n\nType `String`\nDefault value: NONE\n\nThe RTT latency in milliseconds. *Used when connectivity is set to `custom`.*\n\n#### options.packetLossRate\n\nType `String`\nDefault value: NONE\n\nThe package loss rate (percentage of packets to drop). *Used when connectivity is set to `custom`.*\n\n#### options.login\n\nType `String`\nDefault value: NONE\n\nUsername for authenticating tests.\n\n#### options.password\n\nType `String`\nDefault value: NONE\n\nPassword for authenticating tests.\n\n#### options.authenticationType\n\nType `Number`\nDefault value: 0\n\nType of authentication. 0 = Basic, 1 = SNS.\n\n#### options.runs\n\nType `Number`\nDefault value: 1\n\nNumber of test runs.\n\n#### options.budget\n\nType `Object`\n\nAllows you to specify your budget for a number of different variables, including:\n\n##### budget.visualComplete\n\nType `String`\nDefault value: NONE\n\nThe budget for visually complete in millseconds.\n\n##### budget.render\n\nType `String`\nDefault value: 1000\n\nThe budget for start render time in millseconds.\n\n##### budget.loadTime\n\nType `String`\nDefault value: NONE\n\nThe budget for load time in millseconds.\n\n##### budget.docTime\n\nType `String`\nDefault value: NONE\n\nThe budget for `document.complete` in millseconds.\n\n##### budget.fullyLoaded\n\nType `String`\nDefault value: NONE\n\nThe budget for fully loaded time in millseconds.\n\n##### budget.bytesIn\n\nType `String`\nDefault value: NONE\n\nThe budget for overall weight in bytes.\n\n##### budget.bytesInDoc\n\nType `String`\nDefault value: NONE\n\nThe budget for number of bytes downloaded before the Document Complete time.\n\n##### budget.requests\n\nType `String`\nDefault value: NONE\n\nThe budget for overall number of requests.\n\n##### budget.requestsDoc\n\nType `String`\nDefault value: NONE\n\nThe budget for number of requests made before the Document Complete time.\n\n##### budget.speedIndex\n\nType `String`\nDefault value: 1000\n\nThe budget for calculated SpeedIndex.\n\n### Usage Examples\n\n#### 1. Test http://google.com against default budget settings\n\n```javascript\nperfbudget: {\n  default: {\n    options: {\n      url: 'http://google.com',\n      key: 'API_KEY_HERE'\n    }\n  }\n}\n```\n\n#### 2. Test http://google.com using custom budget for SpeedIndex and Visually Complete\n\n```javascript\nperfbudget: {\n  default: {\n    options: {\n      url: 'http://google.com',\n      key: 'API_KEY_HERE',\n      budget: {\n\t\tvisualComplete: '4000',\n\t\tspeedIndex: '1500'\n      }\n    }\n  }\n}\n```\n\n#### 3. Test URL using custom budget and private WPT Instance\n\n```javascript\nperfbudget: {\n  default: {\n    options: {\n      url: 'http://google.com',\n      wptInstance: 'http://PRIVATE_INSTANCE.com',\n      budget: {\n\t\tvisualComplete: '4000',\n\t\tspeedIndex: '1500'\n      }\n    }\n  }\n}\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n- Version 0.1.3: Bug fix for custom options. Now includes ability to use HTTP authentication on tests.\n- Version 0.1.4: Ability to define custom number of test runs.\n- Version 0.1.5: Improved polling using the underlying API. Users can now set polling frequency as well as a timeout for tests.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-perfbudget@0.1.5",
  "_from": "grunt-perfbudget@"
}
