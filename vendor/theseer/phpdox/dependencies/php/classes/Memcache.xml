<?xml version="1.0" encoding="UTF-8" ?>
<class xmlns="http://xml.phpdox.net/src" full="Memcache" namespace="" name="Memcache">
  <method name="add" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Add an item to the server"/>
      <return type="bool"/>
    </docblock>
    <parameter name="key" optional="false" byreference="false" type="string"/>
    <parameter name="var" optional="false" byreference="false" type="object" class="mixed"/>
    <parameter name="flag" optional="true" byreference="false" type="int"/>
    <parameter name="expire" optional="true" byreference="false" type="int"/>
  </method>
  <method name="addServer" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Add a memcached server to connection pool">Memcache::addServer adds a server to the connection pool. The connection, which was opened using Memcache::addServer will be automatically closed at the end of script execution, you can also close it manually with Memcache::close. You can also use the memcache_add_server function.</description>
      <return type="bool"/>
    </docblock>
    <parameter name="host" optional="false" byreference="false" type="string"/>
    <parameter name="port" optional="true" byreference="false" type="int"/>
    <parameter name="persistent" optional="true" byreference="false" type="object" class="bool"/>
    <parameter name="weight" optional="true" byreference="false" type="int"/>
    <parameter name="timeout" optional="true" byreference="false" type="int"/>
    <parameter name="retry_interval" optional="true" byreference="false" type="int"/>
    <parameter name="status" optional="true" byreference="false" type="object" class="bool"/>
    <parameter name="failure_callback" optional="true" byreference="false" type="object" class="callable"/>
    <parameter name="timeoutms" optional="true" byreference="false" type="int"/>
  </method>
  <method name="close" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Close memcached server connection"/>
      <return type="bool"/>
    </docblock>
  </method>
  <method name="connect" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Open memcached server connection"/>
      <return type="bool"/>
    </docblock>
    <parameter name="host" optional="false" byreference="false" type="string"/>
    <parameter name="port" optional="true" byreference="false" type="int"/>
    <parameter name="timeout" optional="true" byreference="false" type="int"/>
  </method>
  <method name="decrement" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Decrement item's value">Memcache::decrement decrements value of the item by value. Similarly to Memcache::increment, current value of the item is being converted to numerical and after that value is subtracted. New item's value will not be less than zero. Do not use Memcache::decrement with item, which was stored compressed, because consequent call to Memcache::get will fail. Memcache::decrement does not create an item if it didn't exist. Also you can use memcache_decrement function.</description>
      <return type="int"/>
    </docblock>
    <parameter name="key" optional="false" byreference="false" type="string"/>
    <parameter name="value" optional="true" byreference="false" type="int"/>
  </method>
  <method name="delete" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Delete item from the server"/>
      <return type="bool"/>
    </docblock>
    <parameter name="key" optional="false" byreference="false" type="string"/>
    <parameter name="timeout" optional="true" byreference="false" type="int"/>
  </method>
  <method name="flush" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Flush all existing items at the server"/>
      <return type="bool"/>
    </docblock>
  </method>
  <method name="get" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Retrieve item from the server">Memcache::get returns previously stored data if an item with such key exists on the server at this moment.</description>
      <return type="string"/>
    </docblock>
    <parameter name="key" optional="false" byreference="false" type="string"/>
    <parameter name="flags" optional="true" byreference="false" type="int"/>
  </method>
  <method name="getExtendedStats" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Get statistics from all servers in pool">Memcache::getExtendedStats returns a two-dimensional associative array with server statistics. Array keys correspond to host:port of server and values contain the individual server statistics. A failed server will have its corresponding entry set to FALSE. You can also use the memcache_get_extended_stats function.</description>
      <return type="array"/>
    </docblock>
    <parameter name="type" optional="true" byreference="false" type="string"/>
    <parameter name="slabid" optional="true" byreference="false" type="int"/>
    <parameter name="limit" optional="true" byreference="false" type="int"/>
  </method>
  <method name="getServerStatus" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Returns server status">Memcache::getServerStatus returns a the servers online/offline status. You can also use memcache_get_server_status function.</description>
      <return type="int"/>
    </docblock>
    <parameter name="host" optional="false" byreference="false" type="string"/>
    <parameter name="port" optional="true" byreference="false" type="int"/>
  </method>
  <method name="getStats" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Get statistics of the server"/>
      <return type="array"/>
    </docblock>
    <parameter name="type" optional="true" byreference="false" type="string"/>
    <parameter name="slabid" optional="true" byreference="false" type="int"/>
    <parameter name="limit" optional="true" byreference="false" type="int"/>
  </method>
  <method name="getVersion" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Return version of the server"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="increment" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Increment item's value">Memcache::increment increments value of an item by the specified value. If item specified by key was not numeric and cannot be converted to a number, it will change its value to value. Memcache::increment does not create an item if it doesn't already exist. Do not use Memcache::increment with items that have been stored compressed because subsequent calls to Memcache::get will fail. Also you can use memcache_increment function.</description>
      <return type="int"/>
    </docblock>
    <parameter name="key" optional="false" byreference="false" type="string"/>
    <parameter name="value" optional="true" byreference="false" type="int"/>
  </method>
  <method name="pconnect" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Open memcached server persistent connection"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="host" optional="false" byreference="false" type="string"/>
    <parameter name="port" optional="true" byreference="false" type="int"/>
    <parameter name="timeout" optional="true" byreference="false" type="int"/>
  </method>
  <method name="replace" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Replace value of the existing item"/>
      <return type="bool"/>
    </docblock>
    <parameter name="key" optional="false" byreference="false" type="string"/>
    <parameter name="var" optional="false" byreference="false" type="object" class="mixed"/>
    <parameter name="flag" optional="true" byreference="false" type="int"/>
    <parameter name="expire" optional="true" byreference="false" type="int"/>
  </method>
  <method name="set" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Store data at the server">Memcache::set stores an item var with key on the memcached server. Parameter expire is expiration time in seconds. If it's 0, the item never expires (but memcached server doesn't guarantee this item to be stored all the time, it could be deleted from the cache to make place for other items). You can use MEMCACHE_COMPRESSED constant as flag value if you want to use on-the-fly compression (uses zlib). Remember that resource variables (i.e. file and connection descriptors) cannot be stored in the cache, because they cannot be adequately represented in serialized state. Also you can use memcache_set function.</description>
      <return type="bool"/>
    </docblock>
    <parameter name="key" optional="false" byreference="false" type="string"/>
    <parameter name="var" optional="false" byreference="false" type="object" class="mixed"/>
    <parameter name="flag" optional="true" byreference="false" type="int"/>
    <parameter name="expire" optional="true" byreference="false" type="int"/>
  </method>
  <method name="setCompressThreshold" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Enable automatic compression of large values">Memcache::setCompressThreshold enables automatic compression of large values. You can also use the memcache_set_compress_threshold function.</description>
      <return type="bool"/>
    </docblock>
    <parameter name="threshold" optional="false" byreference="false" type="int"/>
    <parameter name="min_savings" optional="true" byreference="false" type="object" class="float"/>
  </method>
  <method name="setServerParams" abstract="false" static="false" final="false">
    <docblock>
      <description compact="Changes server parameters and status at runtime">Memcache::setServerParams changes server parameters at runtime. You can also use the memcache_set_server_params function.</description>
      <return type="bool"/>
    </docblock>
    <parameter name="host" optional="false" byreference="false" type="string"/>
    <parameter name="port" optional="true" byreference="false" type="int"/>
    <parameter name="timeout" optional="true" byreference="false" type="int"/>
    <parameter name="retry_interval" optional="true" byreference="false" type="int"/>
    <parameter name="status" optional="true" byreference="false" type="object" class="bool"/>
    <parameter name="failure_callback" optional="true" byreference="false" type="object" class="callable"/>
  </method>
</class>
