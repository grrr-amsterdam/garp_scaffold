<?xml version="1.0" encoding="UTF-8" ?>
<class xmlns="http://xml.phpdox.net/src" full="EvChild" namespace="" name="EvChild">
  <extends name="EvWatcher" full="EvWatcher"/>
  <member name="pid" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="&#10;       Readonly&#10;       . The process ID this watcher watches out for, or&#10;       0&#10;       , meaning any process ID.&#10;      "/>
    </docblock>
  </member>
  <member name="rpid" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="&#10;       Readonly&#10;       .The process ID that detected a status change.&#10;      "/>
    </docblock>
  </member>
  <member name="rstatus" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="&#10;       Readonly&#10;       . The process exit status caused by&#10;       rpid&#10;       .&#10;      "/>
    </docblock>
  </member>
  <member name="is_active" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="&#10;       Readonly&#10;       . TRUE if the watcher is active. FALSE otherwise.&#10;      "/>
    </docblock>
  </member>
  <member name="data" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="&#10;       User custom data associated with the watcher&#10;      "/>
    </docblock>
  </member>
  <member name="is_pending" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="&#10;       Readonly&#10;       .TRUE if the watcher is pending, i.e. it has outstanding events, but&#10;       its callback has not yet been invoked. FALSE otherwise. As long, as a&#10;       watcher is pending(but not active), one must&#10;       not&#10;       change its priority.&#10;      "/>
    </docblock>
  </member>
  <member name="priority" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="&#10;       Integer&#10;       between&#10;       Ev::MINPRI&#10;       and&#10;       Ev::MAXPRI&#10;       . Pending watchers with higher priority will be invoked before watchers&#10;       with lower priority, but priority will not keep watchers from being&#10;       executed(except for&#10;       EvIdle&#10;       watchers).&#10;       EvIdle&#10;       watchers provide functionality to suppress invocation when higher&#10;       priority events are pending.&#10;      "/>
    </docblock>
  </member>
  <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Constructs the EvChild watcher object">Constructs the EvChild watcher object.</description>
      <return type="void"/>
    </docblock>
    <parameter name="pid" optional="false" byreference="false" type="int"/>
    <parameter name="trace" optional="false" byreference="false" type="object" class="bool"/>
    <parameter name="callback" optional="false" byreference="false" type="object" class="callable"/>
    <parameter name="data" optional="true" byreference="false" type="object" class="mixed"/>
    <parameter name="priority" optional="true" byreference="false" type="int"/>
  </constructor>
  <method name="createStopped" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Create instance of a stopped EvCheck watcher"/>
      <return type="object"/>
    </docblock>
    <parameter name="pid" optional="false" byreference="false" type="int"/>
    <parameter name="trace" optional="false" byreference="false" type="object" class="bool"/>
    <parameter name="callback" optional="false" byreference="false" type="object" class="callable"/>
    <parameter name="data" optional="true" byreference="false" type="object" class="mixed"/>
    <parameter name="priority" optional="true" byreference="false" type="int"/>
  </method>
  <method name="set" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Configures the watcher"/>
      <return type="void"/>
    </docblock>
    <parameter name="pid" optional="false" byreference="false" type="int"/>
    <parameter name="trace" optional="false" byreference="false" type="object" class="bool"/>
  </method>
  <method name="clear" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="int"/>
    </docblock>
  </method>
  <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
  </constructor>
  <method name="feed" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
    <parameter name="revents" optional="false" byreference="false" type="int"/>
  </method>
  <method name="getLoop" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="EvLoop"/>
    </docblock>
  </method>
  <method name="invoke" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
    <parameter name="revents" optional="false" byreference="false" type="int"/>
  </method>
  <method name="keepalive" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="bool"/>
    </docblock>
    <parameter name="value" optional="true" byreference="false" type="object" class="bool"/>
  </method>
  <method name="setCallback" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
    <parameter name="callback" optional="false" byreference="false" type="object" class="callable"/>
  </method>
  <method name="start" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
  </method>
  <method name="stop" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
  </method>
</class>
